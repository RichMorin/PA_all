# con_how|Perkify_REPLs/main.toml

[ meta ]

  actions     = 'publish'
  id_str      = 'Perkify_REPLs'
  title       = 'Perkify - REPLs'

[ meta.refs ]

  f_authors   = 'cat_peo|Rich_Morin'
  f_editors   = 'NA'

[ about ]

  precis      = 'a quick dip into some Perkify REPLs'

  verbose     = '''
> A read–eval–print loop (REPL),
also termed an interactive toplevel or language shell,
is a simple, interactive computer programming environment
that takes single user inputs (i.e., single expressions),
evaluates (executes) them, and returns the result to the user;
a program written in a REPL environment is executed piecewise.

> -- [$url]{ext_wp|Read–eval–print_loop}

Although REPLs can be used by anyone,
the fact that they are text-based and make no use of cursor positioning
makes them a particularly good fit for blind users.
Some of Perkify's REPLs are one-trick ponies,
good at only one type of task.
Others support general-purpose programming languages.
That said, let's dive in...

*Note:*
The following examples do not pretend to display the real capabilities
of each command, but they do give the flavor
of the language syntax and user interface.
(They also show how to escape from the REPL's clutches!)
Rather than printing the full shell prompt
(e.g., `vagrant@perkify:~$`), I just use a dollar sign (`$`).

### Calculators, Math Systems, etc.

These REPLs range from simple (or not so simple) desk calculators
to systems for performing algebra, statistics, and more.
 
#### bc (<code>[bc]{ext_um|man1/bc.1.html}</code>)

> bc is a language that supports arbitrary precision numbers
with interactive execution of statements.
There are some similarities in the syntax to the C programming language.
A standard math library is available by command line option. ...

> -- [$url]{ext_um|man1/bc.1.html}

The phrase "arbitrary precision", in this context,
means that numbers can be as large as the computer's memory can hold.
Here's a `bc` session that defines and uses a
[factorial]{ext_wp|Factorial} function:

    $ bc
    ...
    1 + 2
    3
    /* Define a factorial function. */
    define f(n) {
      if (n <= 1) return 1
      return n * f(n-1)
    }
    f(42)
    1405006117752879898543142606244511569936384000000000
    quit
    $

#### calc (<code>[calc]{ext_um|man1/calc.1.html}</code>)

Calc (aka apcalc) is another arbitrary precision calculator.
Along with the man page, be sure to check out
[Landon Curt Noll]{ext_wp|Landon_Curt_Noll}'s
[What is calc?]{http://www.isthe.com/chongo/tech/comp/calc/calc-whatis.html}
page and the files in `/usr/share/doc/apcalc/examples`.

    $ calc
    ...
    ; 1 + 2
      3
    ; fact(42)
      1405006117752879898543142606244511569936384000000000
    ; 42!
      1405006117752879898543142606244511569936384000000000
    ; /* Define a factorial function. */
    ; define f(n) {
    ;; if (n <= 1) { return 1 }
    ;; return n * f(n-1)
    ;; }
    f(n) defined
    ; f(42)
      1405006117752879898543142606244511569936384000000000
    ; exit
    $

#### JACAL (<code>[jacal]{ext_um|man1/jacal.1.html}</code>)

> JACAL is a symbolic mathematics system for the simplification
and manipulation of equations and single and multiple valued
algebraic expressions constructed of numbers, variables, radicals,
and algebraic functions, differential, and holonomic functions.
In addition, vectors and matrices of the above objects are included.

> -- [$url]{ext_um|man1/jacal.1.html}

Because JACAL is based on `scm`, it includes a complete Scheme interpreter.

    $ jacal
    ...
    e0 : 1 + 2;
    e0: 3

    e1 : factorial(42);
    e1: 1405006117752879898543142606244511569936384000000000

    e2 : quit();
    $

#### Octave (<code>[octave]{ext_um|man1/octave.1.html}</code>)

[Octave]{ext_wp|GNU_Octave} is an
interpreted programming language for performing mathematical calculations.
Its syntax is reminiscent of [MATLAB]{ext_wp|MATLAB}.
For more information, see the
[GNU Octave   ]{https://octave.org/doc/v4.2.1/index.html} and 
[Octave Forge ]{https://octave.sourceforge.io} pages.

    $ octave
    ...
    octave:1> 1 + 2
    ans =  3
    octave:2> factorial(42)
    ans =    1.4050e+51
    octave:3> # Define a factorial function.
    octave:3> function r = f(n)
    >   if (n <= 1) r = 1;
    >   else r = n * f(n-1);
    >   endif
    > endfunction
    octave:4> f(42)
    ans =    1.4050e+51
    octave:5> ^D
    $

#### R (<code>[R]{ext_um|man1/R.1.html}</code>)

[R]{ext_wp|R_(programming_language)} is an
interpreted programming language for performing statistical computing.
Its syntax is reminiscent of [S]{ext_wp|S_(programming_language)}.
For more information, see
[Programming with R]{https://swcarpentry.github.io/r-novice-inflammation}.

    $ R
    ...
    > 1 + 2
    [1] 3
    # Define a factorial function.
    > f <- function(n) {
    +   if (n <= 1) { 1 }
    +   else { n * f(n-1) }
    + }
    > f(42)
    [1] 1.405006e+51
    > q()
    Save workspace image? [y/n/c]: n
    $

#### units (<code>[units]{ext_um|man1/units.1.html}</code>)

> The "units" program converts quantities expressed in various scales
to their equivalents in other scales.
The "units" program can handle multiplicative scale changes
as well as nonlinear conversions such as Fahrenheit to Celsius. ...

> -- [$url]{ext_um|man1/units.1.html}

    $ units
    ...
    You have: 100 pound
    You want: kilogram
      * 45.359237
      / 0.022046226
    You have: 100 degF
    You want: degC
      * 55.555556
      / 0.018
    You have: 100 mile/hour
    You want: furlong/fortnight
      * 268800
      / 3.7202381e-06
    You have: quit
    $

#### wcalc (<code>[wcalc]{ext_um|man1/wcalc.1.html}</code>)

`wcalc` is a natural-expression command-line calculator.
Unlike `bc` and `calc`,
it uses [floating-point]{ext_wp|Floating-point_arithmetic} arithmetic.

    $ wcalc
    ...
    -> 1 + 2
     = 3
    -> fact(42)
     = 1.40501e+51
    -> ^D
    $

### Programming Languages

A number of general-purpose programming languages offer REPLs,
providing a fast and convenient way to test small bits of code.
Perkify has a small sampling of these and may well add more.

#### Elixir (<code>[iex]{ext_um|man1/iex.1.html}</code>)

[Elixir]{ext_wp|Elixir_(programming_language)} is a
[strongly-typed]{ext_wp|Strong_and_weak_typing}
[functional programming]{ext_wp|Functional_programming} language
with syntax that is reminiscent of Ruby.
It runs on the [Erlang]{ext_wp|Erlang_(programming_language)}
[virtual machine]{ext_wp|Virtual_machine}.

    $ iex
    ...
    iex(1)> 1 + 2
    3
    iex(2)> # Define a factorial function.
    nil
    iex(3)> defmodule F do
    ...(3)>   def f(n) do
    ...(3)>     if n <= 1 do
    ...(3)>       1
    ...(3)>     else
    ...(3)>       n * f(n-1)
    ...(3)>     end
    ...(3)>   end
    ...(3)> end
    {:module, F, ... }
    iex(4)> F.f(42)
    1405006117752879898543142606244511569936384000000000
    iex(5)> ^C
    BREAK: (a)bort (c)ontinue (p)roc info ...
    a
    $

#### Erlang (<code>[erl]{ext_um|man1/erl.1.html}</code>)

[Erlang]{ext_wp|Erlang_(programming_language)} is a
[strongly-typed]{ext_wp|Strong_and_weak_typing}
[functional programming]{ext_wp|Functional_programming} language
with a syntax that is reminiscent of [Prolog]{ext_wp|Prolog}.
It runs on the [Erlang]{ext_wp|Erlang_(programming_language)}
[virtual machine]{ext_wp|Virtual_machine}.

    $ erl
    ...
    1> 1 + 2.
    3
    2> ^C
    BREAK: (a)bort (c)ontinue (p)roc info ...
    a
    $ 

#### Forth (<code>[gforth]{ext_um|man1/gforth.1.html}</code>)

[Forth]{ext_wp|Forth_(programming_language)} is an untyped,
[stack-based]{ext_wp|Stack-oriented_programming} language
which uses [Reverse Polish notation]{ext_wp|Reverse_Polish_notation}.
For more information, see the
[Gforth Manual]{https://www.complang.tuwien.ac.at/forth/gforth/Docs-html}.

    $ gforth
    ...
    1 2 + CR . 
    3  ok
    \ Define a factorial function.
    : f ( n -- n! ) 1 swap 1+ 1 ?do i * loop CR ;  ok
    3 f . CR
    6
    ^D
    $

#### Perl (<code>[perl]{ext_um|man1/perl.1.html}</code>)

[Perl]{ext_wp|Perl} is a
[strongly-typed]{ext_wp|Strong_and_weak_typing} programming language,
but it masks this for certain operations
(e.g., concatenating a string with an integer).
Although Perl does not offer a REPL, *per se*,
its debugger can be used to simulate one:

    $ perl -de1
    ...
    main::(-e:1):	1
      DB<1> p 1 + 2
    3
      DB<2> p 'abc' . 123
    abc123
      DB<3> q
    $

#### Prolog (<code>[gprolog]{ext_um|man1/gprolog.1.html}</code>)

[Prolog]{ext_wp|Prolog} is a
[logic programming]{ext_wp|Logic_programming} language
from the [Artificial Intelligence]{ext_wp|Artificial_intelligence} community. 
The [full manual]{http://gprolog.org/manual/html_node} for GNU Prolog
is available online.

    $ gprolog
    ...
    | ?- X is 1 + 2.
    X = 3
    yes
    | ?- ^D
    $

#### Python (<code>[ipython]{ext_um|man1/ipython.1.html}</code>, <code>[ipython3]{ext_um|man1/ipython3.1.html}</code>)

[Python]{ext_wp|Python_(programming_language)} is a
[strongly-typed]{ext_wp|Strong_and_weak_typing}
[object-oriented programming]{ext_wp|Object-oriented_programming} language
whose syntax uses indentation for program structuring.
Perkify offers REPLs for both Python 2 (`ipython`) and 3 (`ipython3`).

    $ ipython
    ...
    In [1]: 1 + 2
    Out[1]: 3

    In [2]: # Define a factorial function.

    In [3]: def f(n):
       ...:     if n <= 1:
       ...:         return 1
       ...:     else:
       ...:         return n * f(n-1)
       ...:    

    In [4]: f(42)
    Out[4]: 1405006117752879898543142606244511569936384000000000L

    In [5]: exit
    $

#### Ruby (<code>[irb]{ext_um|man1/irb.1.html}</code>)

[Ruby]{ext_wp|Ruby_(programming_language)} is a
[strongly-typed]{ext_wp|Strong_and_weak_typing}
[object-oriented programming]{ext_wp|Object-oriented_programming} language.

    $ irb
    irb(main):001:0> 1 + 2
    => 3
    irb(main):002:0> # Define a factorial function.
    nil
    irb(main):003:0> def f(n)
    irb(main):004:1>   n.zero? ? 1 : n * f(n - 1)
    irb(main):005:1> end
    => :fact
    irb(main):006:0> f(42)
    => 1405006117752879898543142606244511569936384000000000
    irb(main):007:0> ^D
    $

#### Scheme (<code>[scm]{ext_um|man1/scm.1.html}</code>)

[Scheme]{ext_wp|Scheme_(programming_language)} is a
[functional programming]{ext_wp|Functional_programming} language
with a parenthesized prefix notation syntax that is reminiscent of [Lisp]{ext_wp|Lisp_(programming_language)}.

    $ scm
    ...
    > (+ 1 2)
    3
    > ; Define a factorial function.
    > (define (f n)
    >   (if (<= n 0)
    >       1
    >       (* n (f (- n 1)))))
    #<unspecified>
    > (f 42)
    1405006117752879898543142606244511569936384000000000
    > (exit)
    ;EXIT
    $

#### Tcl (<code>[tclsh]{ext_um|man1/tclsh.1.html}</code>)

[Tcl]{ext_wp|Tcl} is an extremely
[weakly-typed]{ext_wp|Strong_and_weak_typing} programming language
(everything is a string) with somewhat idiosyncratic syntax. 

    $ tclsh
    % puts [expr 1 + 2]
    3
    % # Define a factorial function.
    % proc f n { 
        expr {$n < 2 ? 1 : $n * [f [incr n -1]]}
    }
    % puts [f 42]
    1405006117752879898543142606244511569936384000000000
    % exit
    $ 

### Shells (e.g., <code>[bash]{ext_um|man1/bash.1.html}</code>)

John D. Cook makes some interesting points about shells and REPLs:

> A shell is not the same as a REPL (Read Evaluate Print Loop).
They look similar, but they have deep differences.

> Shells are designed for one-line commands,
and they’re a little awkward when used as programming languages.

> Scripting languages are designed for files of commands,
and they’re a little awkward to use from a REPL.

> IPython is an interesting hybrid.
You could think of it as a Python REPL with shell-like features added.
Eshell is another interesting compromise,
a shell implemented in Emacs Lisp that also works as a Lisp REPL.
These hybrids are evidence that as much as people
like their programming languages,
they appreciate additions to a pure language REPL.

> -- [Shell != REPL]{https://www.johndcook.com/blog/2012/06/26/shell-repl}

However, using a shell interactively is a *lot* like using a REPL.
Here's an example in [Bash]{ext_wp|Bash_(Unix_shell)}; you decide...

    $ echo $((1 + 2))
    3
    $

To be continued...
'''

[ zoo ]

  snippets    = '''
SageMath isn't supported in Ubuntu 19.10 (sigh).

#### SageMath (<code>[sage]{ext_um|man1/sage.1.html}</code>)

[SageMath]{ext_wp|SageMath} is a
[computer algebra system]{ext_wp|Computer_algebra_system}
with a syntax that is based on Python.
For more information, see the 
[Sage Tutorial]{http://doc.sagemath.org/pdf/en/tutorial/SageTutorial.pdf}.

    $ sage
    ...
    sage: 1 + 2
    3
    sage: factorial(42)
    1405006117752879898543142606244511569936384000000000
    sage: # Define a factorial function.
    sage: def f(n):
    ....:     if n <= 1:
    ....:         return 1
    ....:     else:
    ....:         return n * f(n-1)
    ....:     
    sage: f(42)
    1405006117752879898543142606244511569936384000000000
    sage: ^D                           
    ...
    $
'''
