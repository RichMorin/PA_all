# con_ove|Perkian_Chef/main.toml

[ meta ]

  actions     = 'publish'
  id_str      = 'Perkian_Chef'
  title       = 'Perkian - Chef'

[ meta.refs ]

  f_authors   = 'cat_peo|Rich_Morin'
  f_editors   = 'NA'

[ about ]

  precis      = 'notes on using Chef to implement Perkian'

  verbose     = '''
Our current prototyping path (known as [Perkify]{con_ove|Perkify_Intro})
concentrates on virtualization:
creating [Docker]{ext_wp|Docker_(software)} "containers" and/or
[Vagrant]{ext_wp|Vagrant_(software)} /
[Virtual Box]{ext_wp|Virtual_Box} "boxes".
Because the Docker and Vagrant ecosystems have a surfeit of tooling,
we don't _need_ to use [Chef]{ext_wp|Chef_(software)}
for container generation, installation, etc.
However, we may still opt to use it, for a couple of reasons.

First, virtualization isn't appropriate for all of our use cases.
For example, Docker isn't even available for Android,
which is an [important target]{con_ove|Perkian_Android} for us.
It might also be too heavyweight an approach
for (say) a cell phone or a [Raspberry Pi]{ext_wp|Raspberry_Pi}.
So, supporting "native" installation on multiple target platforms
is clearly an important long-term objective.
Chef cookbooks and/or recipes would let us handle this gracefully,
dealing with the inevitable platform-specific "build" variations.

Second, because Chef can also delegate tasks to Docker
(e.g., via the [Docker Cookbook]{ext_gh|chef-cookbooks/docker})
or other [package managers]{ext_wp|Package_manager},
we should be able to use Chef for all of our target distributions.
However capable these tools might be,
we'd rather not need to become expert in using all of them...

### Approach

Chef cookbooks and recipes are fairly complex pieces of infrastructure;
we certainly don't want to large numbers of them.
Still, we'd like Chef to provide a layer of abstraction
between the list of packages and the required OS commands.
So, our plan is to generate data files with the needed information,
then have our Chef recipes read and act on them.
Since we're already using [TOML]{ext_wp|TOML} in Pete's Alley,
it makes sense to encode the data in that format.

### Example

Let's assume that we're building a distribution based on
[Debian]{ext_wp|Debian} and that we wish
to include the [Atril]{cat_sof|Atril} package.
All of the needed information can be harvested
from the item's `main.toml` and `make.toml` files.
Indeed, we already have [Elixir]{ext_wp|Elixir_(programming_language)} code
in Pete's Alley to generate control files (e.g., `debian.toml`)
of the following form:

    [ 'Atril' ]

      actions     = 'build, publish'
      package     = 'debi_pkgs|buster/atril'
      precis      = 'the official document viewer for MATE'
      title       = 'Atril'

A naive recipe for adding native packages to a Debian-based distribution
might look something like this:

    require 'toml'
    items   = TOML.load_file('debian.toml')
    keys    = items.keys.sort

    keys.each do |key|
      item  = items[key]
      puts "#{ key } - #{ item['precis'] }"
      pkg_name  = item['package'].sub(%r{^.+/}, '')
      package pkg_name
    end

### Complications

In practice, things will be quite a bit more complicated.
For example, there may be commands and/or recipes
that will need to be run before or after the package installation.
In some cases, such as [GitHub]{ext_wp|GitHub} repositories or
[RubyGems]{ext_wp|RubyGems}, there may not _be_ a Debian package.
We may also be creating containers that contain more than one package.
Still, it should be possible to create appropriate recipes,
assuming that we can find out what needs to be done.

To be continued...
'''

[ zoo ]

  snippets    = '...'
