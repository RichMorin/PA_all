# con_ove|PP_Perkify_Make_VB/main.toml

[ meta ]

  actions     = 'publish'
  id_str      = 'PP_Perkify_Make_VB'
  title       = 'Perkify - Making Vagrant Boxes'

[ meta.refs ]

  f_authors   = 'cat_peo|Rich_Morin'
  f_editors   = 'cat_peo|Rich_Morin'

[ about ]

  precis      = 'notes on making Vagrant-based Perkify boxes'

  verbose     = '''
My current approach to making [Vagrant]{ext_wp|Vagrant_(software)}-based
Perkify boxes is a bit more manual than I'd prefer.
If and when I understand [Packer]{https://www.packer.io} a bit better,
I may start using it.

### Background

The `Perkify/_base` directory contains two versions of the `Vagrantfile` and
a [set of files]{ext_rm|PA_all/tree/master/PP_Perkify/Vagrant/_base/make}
for making a new box:

    _base/
    | bin/*             assorted scripts to be copied
    | html/index.html   dummy index file
    | make/             files used in making the image
    | | add_ons         installs add-on packages
    | | add_ons.rb      helper for the add_ons script
    | | add_ons.toml    specify Perkify add-on packages
    | | get_apt         get an APT package
    | | get_gem         get a Ruby Gem
    | Vagrantfile.dist  configuration (distributed)
    | Vagrantfile.make  configuration (for build)

### Procedure

Deal with a few preliminary tasks:

    $ mkdir ~/perk_make     # just in case
    $ cd ~/perk_make        # get situated
    $ rm -rf .vagrant *     # remove cruft

Load and start up the Vagrantfile (etc) for Ubuntu 19.04: 

    # https://app.vagrantup.com/bento/boxes/ubuntu-19.04

    $ vagrant init bento/ubuntu-19.04 --box-version 201906.18.0

    $ vagrant up
    ...

Log in, kick the tires a bit, then exit:

    $ vagrant ssh

    vagrant@vagrant:~$ ...
    vagrant@vagrant:~$ exit

Halt the VM, update the working directory, and bring up the VM again: 

    $ vagrant halt

    $ base=../_Work/P_Elixir/PA_hax/PA_all/PP_Perkify/Vagrant/_base
    $ /bin/cp -R $base/* .
    $ /bin/cp -f Vagrantfile.make Vagrantfile
    $ vagrant up --provision
    ...

Start up an SSH session to the VM:

    $ vagrant ssh
    ...
    91 updates can be installed immediately.
    50 of these updates are security updates.

Apply the available Ubuntu updates (twice, for good measure):

    # Skip these to speed up testing...

    vagrant@perkify-make:~$ sudo apt update && sudo apt upgrade -y
    ...

    vagrant@perkify-make:~$ sudo apt update && sudo apt upgrade -y
    ...
    0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

Fold in the Perkify add-on packages, then tidy up a bit:

    vagrant@perkify-make:~$ l /vagrant
    bin/  html/  make/  Vagrantfile  Vagrantfile.dist  Vagrantfile.make

    # Skip the next step to speed up testing. Instead, just:
    vagrant@perkify-make:~$ cp -R /vagrant _base

    vagrant@perkify-make:~$ sudo /vagrant/make/add_ons
    debian_apt    Accerciser,   accerciser,   a11y explorer
       46.2   646
    ...
    ruby_gems     Xiki,         xiki,         text-based menus
       62.5    98

    Loading issues: none

    Named packages:    169
    Total packages:   3103
    Duration: 6103.0 seconds (101.7 minutes)

    vagrant@perkify-make:~$ sudo apt autoremove

Kick the tires a bit, then exit:

    vagrant@perkify-make:~$ ...
    vagrant@perkify-make:~$ exit

Save the VM image as a package:

    $ vagrant package --output ../perk_07.box --vagrantfile Vagrantfile.dist

    $ wc -c ../perk_07.box
    7683603206 ../perk_07.box

    $ shasum ../perk_07.box
    fc52b20b9812642a939f28b3180014cb13f8ed19  ../perk_07.box

Set up and populate a new version of Perkify on Vagrant Cloud.
Note that we need to work out details for handling upgrades...

- Go to the page for [Rich_Morin]{https://app.vagrantup.com/Rich_Morin}

- If need be, log in.

- Create a new version:
  - Click the "New version" button.
  - Fill in the Version and Description.
  - Click the "Create version" button.
  - Click the "Add a provider" button.
  - Select "virtualbox" as the Provider.

- Under "File Hosting":
  - Make sure "Upload to Vagrant Cloud" is selected.

- Under "Checksum Type":
  - Select SHA1

- Under "Checksum":
  - paste in fc52b20b9812642a939f28b3180014cb13f8ed19

- Click the "Continue to upload" button.

- Under "Add Provider File"
  - Click the "Choose file" button.
  - Select `~/perk07.box`.
  - Click the "Open" button.

- Wait for upload to complete.
  - Click "Perkify" link.
  - Click "Release" link for `v0.1.7`.
  - Click the "Release version" button.

Download and try out, largely per `.../PP_Perkify_Install/main.toml`:

    $ mkdir ~/perk_test                 # create a working directory
    $ cd ~/perk_test                    # go to the working directory
    $ vagrant destroy
    $ rm -rf .vagrant *                 # remove cruft

    $ vagrant init Rich_Morin/Perkify --box-version 0.1.6
    $ vagrant up                        # download and boot the Perkify VM
    ...

Revoke and/or Delete any old Perkify versions:

- For each old Perkify version:
  - Click the "Edit" button.
  - Click the "Revoke version" button.
  - Click the "Edit" button.
  - Click the "Delete version" button.

These notes are based (very loosely!) on
[How to Upload Vagrant Box to Vagrant Cloud]{
http://blog.ycshao.com/2017/09/16/how-to-upload-vagrant-box-to-vagrant-cloud}.

### Notes

The `add_ons` script puts most of its log output in `/tmp/add_ons_log/*`
on the VM.  These can be inspected for problems via `vagrant ssh`.

### Resources

#### APT, OBS, etc.

- [Chapter 2. Debian package management
  ]{https://www.debian.org/doc/manuals/debian-reference/ch02.en.html}

- [Debian New Maintainers' Guide
  ]{https://www.debian.org/doc/manuals/maint-guide}

- [Guide for Debian Maintainers
  ]{https://www.debian.org/doc/devel-manuals#debmake-doc}

- [How to make a Debian package without using a helper
  ]{http://www.miriamruiz.es/weblog/?page_id=62}

- [HOWTO: Backport and host Debian & Ubuntu packages on the OBS
  ]{http://forums.debian.net/viewtopic.php?f=16&t=130057}

- [openSuse Build Service
  ]{https://build.opensuse.org}

- [Pale Moon Web Browser
  ]{https://build.opensuse.org/project/show/home:stevenpusser} (OBS example)

#### Packer

- [Packer]{https://www.packer.io}

- [Packer - Build an Image
  ]{https://www.packer.io/intro/getting-started/build-image.html}

- [Building your Virtual Machine with Packer
  ]{https://blog.codeship.com/packer-vagrant-tutorial}

#### Vagrant

- [add --quiet option to vagrant commands #11037
  ]{https://github.com/hashicorp/vagrant/issues/11037}

- [Boxes
  ]{https://www.vagrantup.com/intro/getting-started/boxes.html}

- [Building a Vagrant Box from Start to Finish
  ]{https://www.engineyard.com/blog/building-a-vagrant-box-from-start-to-finish}

- [Creating a New Vagrant Box
  ]{https://www.vagrantup.com/docs/vagrant-cloud/boxes/create.html}

- [Package
  ]{https://www.vagrantup.com/docs/cli/package.html}

- [Vagrantfile - Load Order and Merging
  ]{https://www.vagrantup.com/docs/vagrantfile/#load-order}
'''

[ zoo ]

  snippets    = '''
### Open Questions

- How to kill off port forwarding on the host?

Nastygram:

  /etc/kernel/postinst.d/initramfs-tools:
  update-initramfs: Generating /boot/initrd.img-5.0.0-25-generic
  cryptsetup: WARNING: The initramfs image may not contain cryptsetup binaries 
      nor crypto modules. If that's on purpose, you may want to uninstall the 
      'cryptsetup-initramfs' package in order to disable the cryptsetup initramfs 
      integration and avoid this warning.
'''
