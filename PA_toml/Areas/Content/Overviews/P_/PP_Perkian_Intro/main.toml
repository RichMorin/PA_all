# con_ove|PP_Perkian_Intro/main.toml

[ meta ]

  actions     = 'publish'
  id_str      = 'PP_Perkian_Intro'
  title       = "Perkian - Introduction"

[ meta.refs ]

  f_authors   = 'cat_peo|Rich_Morin'
  f_editors   = 'cat_peo|Rich_Morin'

[ about ]

  precis      = "Perkian, an effort to make operating systems blind-friendly"

  verbose     = '''
This page discusses Perkian, a speculative project
aimed at making end-user operating systems more blind-friendly.
Named after [Debian]{ext_wp|Debian},
[Raspbian]{ext_wp|Raspbian}, and the
[Perkins Brailler]{ext_wp|Perkins_Brailler}),
Perkian's initial thrust is to produce "turn-key" distributions
of relevant open source software.

### Background

Most end-user [operating systems]{ext_wp|Operating_system}
(e.g., for personal computers or cell phones)
are optimized for use by sighted users.
So, for example, they rely heavily on graphical user interfaces
([GUIs]{ext_wp|Graphical_user_interface}),
which may or may not be accessible to users with
[visual impairments]{ext_wp|Visual_impairment}.
This emphasis on GUIs starts at the desktop level and extends into
most of the applications.

In addition, these systems take little advantage of the wealth of software
that has been developed in the [open source]{ext_wp|Open_source} community.
Much of this software is text-based,
eliminating a large class of accessibility issues.
Some packages, such as [BRLTTY]{cat_sof|BRLTTY} and [Emacspeak]{cat_sof|Emacspeak},
are specifically intended for use by the blind.
The Perkian Project seeks to make these sorts of software conveniently available
on a wide range of existing computers,
including any packages that have a plausible argument for inclusion.

Surprisingly, the impact of including "extra" software is negligible.
Terabyte-scale [hard disk drives]{ext_wp|Hard_disk_drive} and
[solid-state drives]{ext_wp|Solid-state_drive} are commonplace;
even [microSD cards]{ext_wp|Secure_Digital#Micro-cards}
can store more than a hundred gigabytes.
So, even a few gigabytes of added software won't "fill up the disk".
Also, software doesn't use any runtime resources (e.g., CPU, I/O, RAM)
when it isn't running, so it can't "slow the system down".
In short, there isn't any practical limit on the amount of software
that can be added and no particular reason to be parsimonious.

### Adding Packages

Adding open source packages to existing operating systems can be challenging,
requiring substantial amounts of effort, luck, skill, and time.
One of the biggest problems is fragmentation:
even if a package has been ported to the user's operating system,
there may be no well-tuned way to install it.
Not surprisingly, typical personal computer users
install very few open source packages.
However, there appears to be a path through the wilderness,
based on several observations:

- Linux is the main target platform for most open source developers.

- Linux-based [virtual machines]{ext_wp|Virtual_machine}
  can be run on most personal computer operating systems.

- Debian's Advanced Package Toolkit ([APT]{ext_wp|APT_(Package_Manager)})
  contains most popular open source packages.

- [Ubuntu]{ext_wp|Ubuntu}, based on Debian,
  is a popular, batteries-included Linux distribution.

By using a Linux-based virtual machine to encapsulate
a suite of open source packages, we can "dance around" most issues
of porting, packaging, and operating system compatibility.
That is, we can create and distribute a suite of blind-friendly packages
that enhances a wide range of existing systems.
And, because we only have to support a single (albeit virtual) platform,
the packages can be configured and tuned to work well together.

The [Perkify]{con_ove|PP_Perkify_Intro} distribution takes just this approach.
A copy of Ubuntu, enhanced with dozens of open source packages,
is converted into a virtual machine,
using [Vagrant]{ext_wp|Vagrant_(software)}
and [Virtual Box]{ext_wp|Virtual_Box}.
The resulting "box" can be downloaded, installed, and run
on any conventional (i.e., 64-bit, Intel-based) personal computer.

### Portability

As long as a system can be convinced to run a suite of Linux software
(either directly or indirectly), it's a plausible target.
However, desktop systems are inconvenient to carry around
and even laptop computers have a lot of hardware (e.g., display screens)
which is irrelevant for blind users.
So, as a longer-term goal, I'd like to make Perkian part of a "palmtop"
computer system.

Various users have different, but largely compatible criteria
for a blind-friendly portable computer.
Some would be happy with a simple "notetaker",
while others will want a complete computing solution.
However, most users want something that's convenient and easy to use,
economical, lightweight, small, etc.
It should be usable on its own, but support keyboards, etc.
[And a pony...]{https://blog.codinghorror.com/and-a-pony}

It should have a simple, menu-based interface for casual and/or naive use
(e.g., playing music, taking notes, sending messages).
Something like [Xiki]{cat_sof|Xiki}
might be a useful starting point for this.
However, it should also have a selection of
[command-line interfaces]{ext_wp|Command-line_interface}
(e.g., the [Bash shell]{ext_wp|Bash_(Unix_shell)}, text-based commands)
for expert users and/or complex tasks.

The device should "boot up" very quickly.
An "always on" device would be ideal,
but any continuous power drain will limit battery life.
(A quiescent low-power mode might resolve this,
but seems challenging to provide.)
For the moment, users will need to recharge the battery on a regular basis
(e.g., from an [AC adaptor]{ext_wp|AC_adapter} or a
"[power bank]{ext_wp|Battery_charger#Power_bank}").
Alternatively, they can simply put up with the booting delay.

The [Raspberry Pi]{ext_wp|Raspberry_Pi} and similar economical computers
are tempting targets, but they are not the only interesting possibility.
Billions of cell phones run [Android]{ext_wp|Android_(operating_system)},
so all of them can run Linux applications.
Many of these phones are outdated
and consequently available for little money.
So, I am [also investigating]{con_ove|PP_on_Android}
porting the Perkify suite to these devices.

### Related Work

Most personal computer operating systems (e.g., macOS, Windows)
support a minimal level of accessibility.
For example, they may provide [screen readers]{ext_wp|Screen_reader},
support for [braille displays]{ext_wp|Refreshable_braille_display}, etc.
However, supporting visually disabled users is not their primary goal,
so there is no comprehensive effort to make these systems accessible.

Several blind-friendly [Linux]{ext_wp|Linux} variants do have this goal.
Some are aimed at conventional (i.e., Intel-based) personal computers;
others concentrate on economical (e.g., ARM-based) single-board computers.
In general, these systems are based on a popular Linux distribution
such as [Arch]{ext_wp|Arch_Linux} or [Debian]{ext_wp|Debian}.
Here are the ones I know about (more suggestions welcome!):

- [F123Light OS   ]{cat_sof|F123Light_OS}
- [Knoppix        ]{cat_sof|Knoppix}
- [Raspberry VI   ]{cat_sof|Raspberry_VI}
- [Slint          ]{http://slint.fr/wiki/en/start}
- [TalkingArch    ]{cat_sof|TalkingArch}
- [Vinux          ]{cat_sof|Vinux}

### Status

The first step is to assemble a "wish list" of plausible inclusions.
As it happens, Pete's Alley has already made a start on this.
Our [Software]{cat_sof|:a} section contains several dozen items (and counting!)
which would be plausible additions to a Perkian distribution.
Each one is described, as usual, in its `main.toml` file.
However, most of these items also have a `make.toml` file.
These files, named after the [Unix]{ext_wp|Unix}
[Make]{ext_wp|Make_(software)} command, will eventually contain
enough porting information to drive a release building tool.

For the moment, however, I'm using hand-edited
[TOML]{ext_wp|TOML} files to drive a Vagrant-based build process.
I've also started a (somewhat speculative) page
on [implementation]{con_ove|PP_Perkian_Impl}.
Meanwhile, the [Make dashboard]{/dash/make} summarizes several dozen packages.
Finally, the [Make Schema]{_schemas/make.toml:s}
is available for your edification and amusement.

To be continued...
'''

[ zoo ]

  snippets    = '...'
