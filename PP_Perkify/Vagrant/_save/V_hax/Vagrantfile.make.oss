  # -*- mode: ruby -*-
  # vi: set ft=ruby :

  # All Vagrant configuration is done below. The "2" in Vagrant.configure
  # configures the configuration version (we support older styles for
  # backwards compatibility). Please don't change it unless you know what
  # you're doing.

  # This is `Vagrantfile.make`.  It specifies the configuration of the VM
  # that should be used in creating the Perkify image.

  Vagrant.configure("2") do |config|
    vm = config.vm

    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.

    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://vagrantcloud.com/search.

    vm.box          = "bento/ubuntu-19.04"
    vm.box_version  = "201906.18.0"

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port.  
    # vm.network "forwarded_port", guest: 80, host: 8080

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access.

    vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # vm.network "private_network", ip: "192.168.33.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # vm.network "public_network"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.  
    # vm.synced_folder "../data", "/vagrant_data"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.

    config.ssh.forward_x11  = true    # Set up port forwarding for X11.

    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.

    vm.provision "shell", inline: <<-SHELL

      # General Perkify setup code

      set -e                # Stop on any error
      set -x                # Trace commands

      export DEBIAN_FRONTEND=noninteractive
      hostname perkify-make
      apt-get update

      apt-get install -y apache2
      src=/var/www/html
      tgt=/home/vagrant/_base/html
      rm -rf $src
      ln -fs $tgt $src

      # OSS audio setup code, adapted (with thanks!) from
      # https://github.com/GeoffreyPlitt/vagrant-audio

      usermod -a -G audio vagrant

      apt-get install -y \
      oss4-base oss4-dkms oss4-source oss4-gtk debconf-utils

      uname=$(uname -r)
      ln -s /usr/src/linux-headers-$uname/ \
            /lib/modules/$uname/source || echo ALREADY SYMLINKED

      module-assistant prepare -i
      module-assistant auto-install -i oss4   # This can take two minutes.

      dss='linux-sound-base linux-sound-base/sound_system select OSS'
      debconf-set-selections <<< $dss
      echo READY.

      # Have to reboot for drivers to kick in (only the first time, of course).

      if [ ! -f ~/runonce ]; then
        reboot
        touch ~/runonce
      fi

      echo 'SHELL finis' #!T
    SHELL

    # Customize settings to enable audio drivers on VM.

    vm.provider :virtualbox do |vb|
      # RUBY_PLATFORM: x86_64-darwin13

      if RUBY_PLATFORM =~ /darwin/
        vb.customize ['modifyvm', :id,
          '--audio',            'coreaudio',
          '--audiocontroller',  'hda'         # choices: hda sb16 ac97
        ]
      elsif RUBY_PLATFORM =~ /bccwin|cygwin|emx|mingw|mswin/
        vb.customize ['modifyvm', :id,
          '--audio',            'dsound',
          '--audiocontroller',  'ac97']
      end
    end
  end

# Group:
#  https://groups.google.com/forum/?#!topic/vagrant-up/yBdSU1NZMaY
# Notes:
#  https://gist.github.com/RichMorin/b4f1b5b4928e8ef11e21dc9cc85fb362
# Vagrantfile:
#  https://gist.github.com/RichMorin/91677d080932225ac1ef6cda80db0fec