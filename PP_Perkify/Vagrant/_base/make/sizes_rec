#!/usr/bin/env ruby
#
# sizes_rec - list package sizes, recursively
#
# Usage:
#
#   sizes_rec           # report on every package in `add_ons.toml`
#   sizes_rec foo bar   # report only on packages foo and bar
#
# Written by Rich Morin, CFCL, 2020.

  require 'fileutils'
  require 'toml-rb'

  def main()

    do_only     = ARGV
    toml_path   = 'add_ons.toml'
    toml_all    = TomlRB.load_file(toml_path)
    toml_pkgs   = toml_all['packages']
    info_all    = []
    @info_pkgs  = {}

    # The add_ons.toml file contains ~200 Debian APT packages.  To retain some
    # useful order and support debugging, these are divided into topical types
    # (e.g., debian_apt_a11y).  The tags below are the type name suffixes:

    tags    = [
      'a11y',   # accessibility
      'admin',  # administration
      'cad',    # 3D CAD, etc.
      'comm',   # communication
      'desk',   # desktops, tools
      'docs',   # documentation
      'games',  # games, etc.
      'image',  # images, etc.
      'math',   # mathematics
      'media',  # audio, video
      'ocr',    # OCR support
      'prog',   # programming
      'term',   # terminal support
      'web',    # world wide web
      'zoo'     # everything else
    ]

    types       = get_types(tags)

    for type in types do
      puts type #!T
      pkg_lines   = toml_pkgs[type].split("\n")

      for pkg_line in pkg_lines do
        next if pkg_line =~ /^#/          # Skip comment lines.
        next if pkg_line =~ /^\s*$/       # Skip blank lines.

        sizes, flags, title, name, notes = get_fields(pkg_line)

        next if !do_only.empty? and !do_only.include?(name)

        size_all    = tally_all(name, 0)
        size_dep    = tally_dep(name, 0)
        size_pkg    = @info_pkgs[name][:installed_size]
        size_kb     = size_all / 1024
        info_pkg    = [name, size_kb, size_pkg, size_dep, size_all]
        info_all   << info_pkg
      end
#     break #!D
    end

    info_tmp   = info_all.
#     select  {|info| info.last > 999999}.
      sort_by {|info| info.last}

    for info_pkg in info_tmp do
      puts "%-30s  %6d  %9d  %9d  %9d" % info_pkg
    end
  end

  def tally_all(name, total_all)
  #
  # Walk the package's dependency tree, tallying the Installed-Size values.
  # Follow both "depends" and "recommends" links).

    @info_pkgs[name]  ||= get_info(name)
    info_pkg    = @info_pkgs[name]
    dep_list    = info_pkg[:depends]    || []
    rec_list    = info_pkg[:recommends] || []
    all_list    = dep_list + rec_list

    @sizes_all  = {} if total_all == 0 
    pkg_size    = info_pkg[:installed_size]
    total_all  += pkg_size
    @sizes_all[name]  = pkg_size

    for todo_name in all_list do
      next if @sizes_all[todo_name]
      total_all   = tally_all(todo_name, total_all)
    end    
    
    total_all
  end

  def tally_dep(name, total_dep)
  #
  # Walk the package's dependency tree, tallying the Installed-Size values.
  # Follow only "depends" links.

    @info_pkgs[name]  ||= get_info(name)
    info_pkg    = @info_pkgs[name]
    dep_list    = info_pkg[:depends]    || []

    @sizes_dep  = {} if total_dep == 0 
    pkg_size    = info_pkg[:installed_size]
    total_dep  += pkg_size
    @sizes_dep[name]  = pkg_size

    for todo_name in dep_list do
      next if @sizes_dep[todo_name]
      total_dep   = tally_dep(todo_name, total_dep)
    end    
    
    total_dep
  end

  def get_deps(inp_line)
  #
  # Convert an input line into a list of dependencies.

    patt_any    = /(:any)/
    patt_vers   = /\s+\(.+?\)/
    patt_pipe   = /\s+\|\s+/

    inp_line.
      gsub(patt_vers, '').
      gsub(patt_any, '').
      gsub(patt_pipe, ', ').
      split(/,\s+/)
  end

  def get_fields(line)
  #
  # Split a comma-separated line into a list of fields.

    line.split(',').map {|field| field.strip }
  end

  def get_info(name)
  #
  # Look up information on a package, using `apt-cache show`.

    pkg_size    = 0
    show_cmd    = "apt-cache show #{ name }"
    show_out    = `#{ show_cmd }`
    show_lines  = show_out.split("\n")

    info_pkg    = { name: name }

    for show_line in show_lines do
      case show_line
      when /^Depends: (.*)$/
        info_pkg[:depends] = get_deps($1)

      when /^Installed-Size: (\d+)$/
        pkg_size  = $1.to_i

      when /^Recommends: (.*)$/
        info_pkg[:recommends] = get_deps($1)
      end 
    end

    info_pkg[:installed_size] = pkg_size
    @info_pkgs[name] = info_pkg
  end

  def get_types(tags)
  #
  # Convert a list of tags into a list of types.

    tags.map {|tag| "debian_apt_#{ tag }" }
  end

  main()
